// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package translator

import (
	"bytes"
	"fmt"

	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type TranslatorErrorCode int64

const (
	TranslatorErrorCode_UNKNOWN_ERROR    TranslatorErrorCode = 0
	TranslatorErrorCode_LOCALE_NOT_FOUND TranslatorErrorCode = 1
)

func (p TranslatorErrorCode) String() string {
	switch p {
	case TranslatorErrorCode_UNKNOWN_ERROR:
		return "TranslatorErrorCode_UNKNOWN_ERROR"
	case TranslatorErrorCode_LOCALE_NOT_FOUND:
		return "TranslatorErrorCode_LOCALE_NOT_FOUND"
	}
	return "<UNSET>"
}

func TranslatorErrorCodeFromString(s string) (TranslatorErrorCode, error) {
	switch s {
	case "TranslatorErrorCode_UNKNOWN_ERROR":
		return TranslatorErrorCode_UNKNOWN_ERROR, nil
	case "TranslatorErrorCode_LOCALE_NOT_FOUND":
		return TranslatorErrorCode_LOCALE_NOT_FOUND, nil
	}
	return TranslatorErrorCode(0), fmt.Errorf("not a valid TranslatorErrorCode string")
}

func TranslatorErrorCodePtr(v TranslatorErrorCode) *TranslatorErrorCode { return &v }

type TranslatorError struct {
	ErrorCode    TranslatorErrorCode `thrift:"error_code,1" json:"error_code"`
	ErrorMessage string              `thrift:"error_message,2" json:"error_message"`
}

func NewTranslatorError() *TranslatorError {
	return &TranslatorError{}
}

func (p *TranslatorError) GetErrorCode() TranslatorErrorCode {
	return p.ErrorCode
}

func (p *TranslatorError) GetErrorMessage() string {
	return p.ErrorMessage
}
func (p *TranslatorError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TranslatorError) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		temp := TranslatorErrorCode(v)
		p.ErrorCode = temp
	}
	return nil
}

func (p *TranslatorError) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ErrorMessage = v
	}
	return nil
}

func (p *TranslatorError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TranslatorError"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TranslatorError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:error_code: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
		return fmt.Errorf("%T.error_code (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:error_code: %s", p, err)
	}
	return err
}

func (p *TranslatorError) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("error_message", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:error_message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ErrorMessage)); err != nil {
		return fmt.Errorf("%T.error_message (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:error_message: %s", p, err)
	}
	return err
}

func (p *TranslatorError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TranslatorError(%+v)", *p)
}

func (p *TranslatorError) Error() string {
	return p.String()
}
